
import React from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { useCart } from '../contexts/CartContext';

const CartIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
    </svg>
);

const Header: React.FC = () => {
    const { user, logout } = useAuth();
    const { totalItems } = useCart();
    const navigate = useNavigate();

    const handleLogout = () => {
        logout();
        navigate('/');
    };
    
    const navLinkClasses = ({ isActive }: { isActive: boolean }) =>
      `text-sm font-medium transition-colors ${isActive ? 'text-indigo-400' : 'text-gray-300 hover:text-white'}`;


    return (
        <header className="bg-gray-800/50 backdrop-blur-sm sticky top-0 z-10 border-b border-gray-700">
            <nav className="container mx-auto px-4 py-3 flex justify-between items-center">
                <div className="flex items-center gap-6">
                    <NavLink to="/" className="text-xl font-bold text-white">HVRDCR MARKET</NavLink>
                    <div className="hidden md:flex items-center gap-4">
                        <NavLink to="/" className={navLinkClasses}>CPU</NavLink>
                        <NavLink to="/motherboards" className={navLinkClasses}>Motherboard</NavLink>
                        <NavLink to="/ram" className={navLinkClasses}>RAM</NavLink>
                        <NavLink to="/avito" className={navLinkClasses}>Avito</NavLink>
                    </div>
                </div>

                <div className="flex items-center gap-4">
                    <NavLink to="/cart" className="relative text-gray-300 hover:text-white transition-colors">
                        <CartIcon />
                        {totalItems > 0 && (
                            <span className="absolute -top-2 -right-2 bg-indigo-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                                {totalItems}
                            </span>
                        )}
                    </NavLink>
                    {user ? (
                        <div className="flex items-center gap-4">
                            <span className="text-sm text-gray-400 hidden sm:block">{user.email}</span>
                            <button onClick={handleLogout} className="text-sm font-medium text-gray-300 hover:text-white">Выйти</button>
                        </div>
                    ) : (
                        <div className="flex items-center gap-4">
                            <NavLink to="/login" className={navLinkClasses}>Войти</NavLink>
                            <NavLink to="/register" className="bg-indigo-600 hover:bg-indigo-500 text-white text-sm font-medium px-4 py-2 rounded-md transition-colors">
                                Регистрация
                            </NavLink>
                        </div>
                    )}
                </div>
            </nav>
        </header>
    );
};

export default Header;

import React from 'react';

const Spinner: React.FC = () => {
  return (
    <div className="flex justify-center items-center py-12">
      <svg
        className="animate-spin h-8 w-8 text-indigo-400"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
      >
        <circle
          className="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          strokeWidth="4"
        ></circle>
        <path
          className="opacity-75"
          fill="currentColor"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        ></path>
      </svg>
    </div>
  );
};

export default Spinner;
import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';
import type { User } from '../types';

interface AuthContextType {
  user: User | null;
  login: (email: string) => void;
  logout: () => void;
  register: (email: string) => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(() => {
    try {
      const item = window.localStorage.getItem('hvrdcr-market-user');
      return item ? JSON.parse(item) : null;
    } catch (error) {
      console.error('Error reading user from localStorage', error);
      return null;
    }
  });

  useEffect(() => {
    try {
      if (user) {
        window.localStorage.setItem('hvrdcr-market-user', JSON.stringify(user));
      } else {
        window.localStorage.removeItem('hvrdcr-market-user');
      }
    } catch (error) {
      console.error('Error writing user to localStorage', error);
    }
  }, [user]);

  const login = (email: string) => {
    // In a real app, this would involve a password and API call
    setUser({ email });
  };

  const logout = () => {
    setUser(null);
  };
  
  const register = (email: string) => {
    // In a real app, this would involve a password and API call
    setUser({ email });
  };


  return (
    <AuthContext.Provider value={{ user, login, logout, register }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';
import type { CartItem, Product } from '../types';

interface CartContextType {
  cartItems: CartItem[];
  addToCart: (product: Product) => void;
  removeFromCart: (productId: string) => void;
  updateQuantity: (productId: string, quantity: number) => void;
  clearCart: () => void;
  totalItems: number;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [cartItems, setCartItems] = useState<CartItem[]>(() => {
    try {
      const item = window.localStorage.getItem('hvrdcr-market-cart');
      return item ? JSON.parse(item) : [];
    } catch (error) {
      console.error('Error reading cart from localStorage', error);
      return [];
    }
  });

  useEffect(() => {
    try {
      window.localStorage.setItem('hvrdcr-market-cart', JSON.stringify(cartItems));
    } catch (error) {
      console.error('Error writing cart to localStorage', error);
    }
  }, [cartItems]);

  const addToCart = (product: Product) => {
    setCartItems(prevItems => {
      const existingItem = prevItems.find(item => item.product.id === product.id);
      if (existingItem) {
        return prevItems.map(item =>
          item.product.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      }
      return [...prevItems, { product, quantity: 1 }];
    });
  };

  const removeFromCart = (productId: string) => {
    setCartItems(prevItems => prevItems.filter(item => item.product.id !== productId));
  };

  const updateQuantity = (productId: string, quantity: number) => {
    if (quantity <= 0) {
      removeFromCart(productId);
    } else {
      setCartItems(prevItems =>
        prevItems.map(item =>
          item.product.id === productId ? { ...item, quantity } : item
        )
      );
    }
  };
  
  const clearCart = () => {
      setCartItems([]);
  };

  const totalItems = cartItems.reduce((total, item) => total + item.quantity, 0);

  return (
    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart, updateQuantity, clearCart, totalItems }}>
      {children}
    </CartContext.Provider>
  );
};

export const useCart = (): CartContextType => {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

import React from 'react';

const AvitoPage: React.FC = () => {
  const sellerUrl = "https://www.avito.ru/brands/a4b76430c8409b64799148aa69cc905c/all/tovary_dlya_kompyutera?page_from=from_item_card&iid=7600471472&sellerId=a4b76430c8409b64799148aa69cc905c";

  // Example items - you can replace these with dynamic data later
  const featuredItems = [
    {
      id: 1,
      name: 'Игровые ПК и комплектующие',
      description: 'Мощные процессоры, видеокарты и готовые сборки для геймеров.'
    },
    {
      id: 2,
      name: 'Серверное оборудование',
      description: 'Надежные решения для вашего бизнеса. Процессоры и компоненты для серверов.'
    },
    {
      id: 3,
      name: 'Аксессуары и периферия',
      description: 'Все необходимое для вашего компьютера: от мышей до мониторов.'
    }
  ];

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h1 className="text-4xl font-bold tracking-tight text-white mb-2">Наши объявления на Avito</h1>
        <p className="text-lg text-gray-400">
          Ознакомьтесь со всеми нашими товарами на нашей официальной странице Avito.
        </p>
      </div>

      <div className="flex justify-center">
        <a
          href={sellerUrl}
          target="_blank"
          rel="noopener noreferrer"
          className="inline-block bg-green-600 hover:bg-green-500 text-white font-bold py-4 px-8 rounded-lg text-lg transition-transform transform hover:scale-105 shadow-lg"
        >
          Перейти в наш магазин на Avito
        </a>
      </div>

      <div className="bg-gray-800/60 p-6 rounded-lg shadow-lg">
        <h2 className="text-2xl font-semibold text-white mb-4 border-b border-gray-700 pb-3">Популярные категории</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 pt-4">
          {featuredItems.map(item => (
            <div key={item.id} className="bg-gray-700/50 p-5 rounded-lg">
              <h3 className="text-xl font-bold text-indigo-400 mb-2">{item.name}</h3>
              <p className="text-gray-300">{item.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default AvitoPage;

import React, { useState } from 'react';
import { useCart } from '../contexts/CartContext';
import { useAuth } from '../contexts/AuthContext';
import { Link, useNavigate } from 'react-router-dom';

const CartPage: React.FC = () => {
  const { cartItems, updateQuantity, removeFromCart, totalItems, clearCart } = useCart();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [isPlacingOrder, setIsPlacingOrder] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const subtotal = cartItems.reduce((sum, item) => sum + item.product.price * item.quantity, 0);
  
  const handleCheckout = async () => {
    if (!user) {
      navigate('/login');
      return;
    }

    setIsPlacingOrder(true);
    setError(null);

    if (typeof (window as any).emailjs === 'undefined') {
        console.error("EmailJS SDK not loaded.");
        setError("Сервис отправки почты не загружен. Пожалуйста, обновите страницу и попробуйте снова.");
        setIsPlacingOrder(false);
        return;
    }

    const SERVICE_ID = 'service_u7p7ehd';
    const TEMPLATE_ID = 'template_9ch06lb';
    const PUBLIC_KEY = 'vlqdVdsk0z-ncGfGz';

    const orderDetails = cartItems.map(item => 
        `- ${item.product.name} (x${item.quantity}): ${new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(item.product.price * item.quantity)}`
    ).join('\n');

    const templateParams = {
        from_name: 'HVRDCR MARKET',
        user_email: user.email,
        email: user.email,
        order_details: orderDetails,
        total_price: new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(subtotal),
    };

    try {
      await (window as any).emailjs.send(SERVICE_ID, TEMPLATE_ID, templateParams, PUBLIC_KEY);
        
      clearCart();
      navigate('/', { state: { orderSuccess: true } });

    } catch (err: any) {
        console.error('FAILED TO SEND EMAIL...', err);
        const errorMessage = err.text || 'Произошла неизвестная ошибка.';
        setError(`Не удалось отправить уведомление о заказе. Ошибка: ${errorMessage}`);
    } finally {
        setIsPlacingOrder(false);
    }
  };

  if (cartItems.length === 0) {
    return (
      <div className="text-center py-20 bg-gray-800/60 rounded-lg">
        <h2 className="text-2xl font-semibold text-white mb-4">Ваша корзина пуста</h2>
        <p className="text-gray-400 mb-6">Самое время добавить что-нибудь интересное!</p>
        <Link
          to="/"
          className="bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-3 px-6 rounded-md transition-colors"
        >
          К каталогу
        </Link>
      </div>
    );
  }

  return (
    <div>
      <h1 className="text-3xl font-bold tracking-tight text-white mb-8">Ваша корзина</h1>
      {error && (
        <div className="bg-red-900/50 border border-red-700 text-red-300 px-4 py-3 rounded-lg mb-6" role="alert">
          <strong className="font-bold">Ошибка оформления заказа! </strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2 bg-gray-800/60 p-6 rounded-lg shadow-lg space-y-4">
          {cartItems.map(item => (
            <div key={item.product.id} className="flex items-center justify-between gap-4 p-4 border-b border-gray-700 last:border-b-0">
              <div className="flex-grow">
                <p className="font-semibold text-white">{item.product.name}</p>
                <p className="text-sm text-gray-400">{new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(item.product.price)}</p>
              </div>
              <div className="flex items-center gap-3">
                <input
                  type="number"
                  min="1"
                  value={item.quantity}
                  onChange={(e) => updateQuantity(item.product.id, parseInt(e.target.value, 10))}
                  className="w-16 bg-gray-700 text-white text-center rounded border border-gray-600 focus:ring-2 focus:ring-indigo-500"
                  aria-label={`Количество ${item.product.name}`}
                />
                <button onClick={() => removeFromCart(item.product.id)} className="text-red-400 hover:text-red-300 transition-colors" aria-label={`Удалить ${item.product.name}`}>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm4 0a1 1 0 012 0v6a1 1 0 11-2 0V8z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
          ))}
        </div>

        <div className="bg-gray-800/60 p-6 rounded-lg shadow-lg h-fit">
          <h2 className="text-xl font-semibold text-white border-b border-gray-700 pb-4 mb-4">Сумма заказа</h2>
          <div className="space-y-2 text-gray-300">
            <div className="flex justify-between">
              <span>{totalItems} товар(а)</span>
              <span>{new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(subtotal)}</span>
            </div>
             <div className="flex justify-between font-bold text-white text-lg pt-4">
              <span>Итого</span>
              <span>{new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(subtotal)}</span>
            </div>
          </div>
          <button
            onClick={handleCheckout}
            disabled={isPlacingOrder}
            className="mt-6 w-full bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-3 px-4 rounded-md transition-colors disabled:bg-indigo-800 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            {isPlacingOrder ? (
                <>
                    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Оформление...</span>
                </>
            ) : (
                'Оформить заказ'
            )}
          </button>
          {!user && <p className="text-center text-sm text-gray-400 mt-4">Пожалуйста, <Link to="/login" className="text-indigo-400 hover:underline">войдите</Link> для оформления заказа.</p>}
        </div>
      </div>
    </div>
  );
};

export default CartPage;
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useLocation } from 'react-router-dom';
import { fetchCpus } from '../services/googleSheetsService';
import type { Cpu } from '../types';
import Spinner from '../components/Spinner';
import { useCart } from '../contexts/CartContext';

// Define the shape of our filters
interface Filters {
  manufacturer: 'all' | 'AMD';
  type: 'all' | 'desktop' | 'server';
}

// A new component for filter dropdowns
const FilterControls: React.FC<{ filters: Filters; onFilterChange: (newFilters: Filters) => void; }> = ({ filters, onFilterChange }) => {
    // A single handler for any select change
    const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const { name, value } = e.target;
        // Update the filters object with the new value
        onFilterChange({ ...filters, [name]: value as Filters[keyof Filters] });
    };

    return (
        <div className="bg-gray-800/60 p-4 rounded-lg mb-6 flex flex-col sm:flex-row gap-4 sm:gap-6 items-start sm:items-center">
            <h3 className="text-lg font-semibold mr-4 shrink-0">Фильтры</h3>
            <div className="flex flex-col sm:flex-row gap-4 w-full">
                {/* Manufacturer Dropdown */}
                <div className="w-full sm:w-1/2 lg:w-1/4">
                    <label htmlFor="manufacturer-filter" className="block text-sm font-medium text-gray-300 mb-1">Производитель</label>
                    <select
                        id="manufacturer-filter"
                        name="manufacturer"
                        value={filters.manufacturer}
                        onChange={handleSelectChange}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        aria-label="Фильтр по производителю"
                    >
                        <option value="all">Все</option>
                        <option value="AMD">AMD</option>
                    </select>
                </div>
                {/* CPU Type Dropdown */}
                <div className="w-full sm:w-1/2 lg:w-1/4">
                    <label htmlFor="type-filter" className="block text-sm font-medium text-gray-300 mb-1">Тип</label>
                    <select
                        id="type-filter"
                        name="type"
                        value={filters.type}
                        onChange={handleSelectChange}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        aria-label="Фильтр по типу процессора"
                    >
                        <option value="all">Все</option>
                        <option value="desktop">Десктопные</option>
                        <option value="server">Серверные</option>
                    </select>
                </div>
            </div>
        </div>
    );
};


// The table component remains unchanged
const CpuTable: React.FC<{ cpus: Cpu[]; onAddToCart: (cpu: Cpu) => void; }> = ({ cpus, onAddToCart }) => (
    <div className="overflow-x-auto bg-gray-800/60 rounded-lg shadow-lg">
        <table className="min-w-full divide-y divide-gray-700">
            <thead className="bg-gray-700/50">
                <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Наименование</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Сокет</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Цена за шт.</th>
                    <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-300 uppercase tracking-wider">Действие</th>
                </tr>
            </thead>
            <tbody className="divide-y divide-gray-700">
                {cpus.map(cpu => (
                    <tr key={cpu.id} className="hover:bg-gray-700/40 transition-colors">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">{cpu.name}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{cpu.socket}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(cpu.price)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                            <button onClick={() => onAddToCart(cpu)} className="bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-2 px-4 rounded-md transition-all duration-200 transform hover:scale-105">
                                В корзину
                            </button>
                        </td>
                    </tr>
                ))}
            </tbody>
        </table>
    </div>
);

const CpuPage: React.FC = () => {
  const [allCpus, setAllCpus] = useState<Cpu[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<Filters>({ manufacturer: 'all', type: 'all' });
  const [notification, setNotification] = useState<string | null>(null);
  
  const { addToCart } = useCart();
  const location = useLocation();

  // Effect to fetch CPU data
  useEffect(() => {
    const loadCpus = async () => {
      try {
        setLoading(true);
        setError(null);
        const cpus = await fetchCpus();
        setAllCpus(cpus);
      } catch (err) {
        if (err instanceof Error) {
            setError(err.message);
        } else {
            setError("Произошла неизвестная ошибка.");
        }
      } finally {
        setLoading(false);
      }
    };
    loadCpus();
  }, []);
  
  // Effect to handle notifications
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => {
        setNotification(null);
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [notification]);

  // Effect to show order success notification from navigation state
  useEffect(() => {
    if (location.state?.orderSuccess) {
      setNotification('Ваш заказ успешно оформлен! Уведомление отправлено.');
      // Clean up location state to prevent message from re-appearing on refresh
      window.history.replaceState({}, document.title);
    }
  }, [location.state]);


  const filteredCpus = useMemo(() => {
    return allCpus.filter(cpu => {
      const manufacturerMatch = filters.manufacturer === 'all' || cpu.manufacturer === filters.manufacturer;
      const typeMatch = filters.type === 'all' ||
                       (filters.type === 'server' && cpu.isServer) ||
                       (filters.type === 'desktop' && !cpu.isServer);
      return manufacturerMatch && typeMatch;
    });
  }, [allCpus, filters]);

  const handleFilterChange = useCallback((newFilters: Filters) => {
    setFilters(newFilters);
  }, []);

  const handleAddToCart = (cpu: Cpu) => {
    addToCart(cpu);
    setNotification(`${cpu.name} добавлен в корзину!`);
  };


  return (
    <div className="space-y-6">
       {notification && (
            <div className="fixed top-20 right-5 bg-green-500 text-white py-2 px-4 rounded-lg shadow-lg z-20">
                {notification}
            </div>
        )}
      <h1 className="text-3xl font-bold tracking-tight text-white">Каталог процессоров</h1>
      <FilterControls filters={filters} onFilterChange={handleFilterChange} />
      
      {loading && <Spinner />}
      
      {error && (
        <div className="bg-red-900/50 border border-red-700 text-red-300 px-4 py-3 rounded-lg" role="alert">
          <strong className="font-bold">Ошибка! </strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}

      {!loading && !error && filteredCpus.length > 0 && (
          <CpuTable cpus={filteredCpus} onAddToCart={handleAddToCart} />
      )}
      
      {!loading && !error && filteredCpus.length === 0 && allCpus.length > 0 && (
          <div className="text-center py-10 bg-gray-800/60 rounded-lg">
              <p className="text-gray-400">По вашему запросу ничего не найдено.</p>
          </div>
      )}
    </div>
  );
};

export default CpuPage;
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';

const LoginPage: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!email || !password) {
      setError('Пожалуйста, заполните все поля');
      return;
    }
    // Mock login logic
    setError('');
    login(email);
    navigate('/');
  };

  return (
    <div className="flex justify-center items-center py-12">
      <div className="w-full max-w-md p-8 space-y-6 bg-gray-800 rounded-lg shadow-lg">
        <h2 className="text-2xl font-bold text-center text-white">Вход в аккаунт</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {error && <p className="text-red-400 text-sm text-center">{error}</p>}
          <div>
            <label htmlFor="email" className="text-sm font-medium text-gray-300 block mb-2">Email</label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            />
          </div>
          <div>
            <label htmlFor="password" className="text-sm font-medium text-gray-300 block mb-2">Пароль</label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            />
          </div>
          <button type="submit" className="w-full py-2 px-4 bg-indigo-600 hover:bg-indigo-500 text-white font-semibold rounded-md transition-colors">
            Войти
          </button>
        </form>
        <p className="text-sm text-center text-gray-400">
          Нет аккаунта?{' '}
          <Link to="/register" className="font-medium text-indigo-400 hover:underline">
            Зарегистрироваться
          </Link>
        </p>
      </div>
    </div>
  );
};

export default LoginPage;

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { fetchMoboAndRam } from '../services/googleSheetsService';
import type { Motherboard } from '../types';
import Spinner from '../components/Spinner';
import { useCart } from '../contexts/CartContext';

interface Filters {
  socket: string;
  formFactor: string;
}

const FilterControls: React.FC<{
  filters: Filters;
  onFilterChange: (newFilters: Filters) => void;
  socketOptions: string[];
  formFactorOptions: string[];
}> = ({ filters, onFilterChange, socketOptions, formFactorOptions }) => {
    
    const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const { name, value } = e.target;
        onFilterChange({ ...filters, [name]: value });
    };

    return (
        <div className="bg-gray-800/60 p-4 rounded-lg mb-6 flex flex-col sm:flex-row gap-4 sm:gap-6 items-start sm:items-center">
            <h3 className="text-lg font-semibold mr-4 shrink-0">Фильтры</h3>
            <div className="flex flex-col sm:flex-row gap-4 w-full">
                <div className="w-full sm:w-1/2 lg:w-1/4">
                    <label htmlFor="socket-filter" className="block text-sm font-medium text-gray-300 mb-1">Сокет</label>
                    <select
                        id="socket-filter"
                        name="socket"
                        value={filters.socket}
                        onChange={handleSelectChange}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        aria-label="Фильтр по сокету"
                    >
                        <option value="all">Все</option>
                        {socketOptions.map(option => <option key={option} value={option}>{option}</option>)}
                    </select>
                </div>
                <div className="w-full sm:w-1/2 lg:w-1/4">
                    <label htmlFor="formFactor-filter" className="block text-sm font-medium text-gray-300 mb-1">Форм-фактор</label>
                    <select
                        id="formFactor-filter"
                        name="formFactor"
                        value={filters.formFactor}
                        onChange={handleSelectChange}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        aria-label="Фильтр по форм-фактору"
                    >
                        <option value="all">Все</option>
                        {formFactorOptions.map(option => <option key={option} value={option}>{option}</option>)}
                    </select>
                </div>
            </div>
        </div>
    );
};

const MotherboardTable: React.FC<{ motherboards: Motherboard[]; onAddToCart: (mobo: Motherboard) => void; }> = ({ motherboards, onAddToCart }) => (
    <div className="overflow-x-auto bg-gray-800/60 rounded-lg shadow-lg">
        <table className="min-w-full divide-y divide-gray-700">
            <thead className="bg-gray-700/50">
                <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Наименование</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Сокет</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Форм-фактор</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Цена за шт.</th>
                    <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-300 uppercase tracking-wider">Действие</th>
                </tr>
            </thead>
            <tbody className="divide-y divide-gray-700">
                {motherboards.map(mobo => (
                    <tr key={mobo.id} className="hover:bg-gray-700/40 transition-colors">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">{mobo.name}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{mobo.socket}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{mobo.formFactor}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(mobo.price)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                            <button onClick={() => onAddToCart(mobo)} className="bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-2 px-4 rounded-md transition-all duration-200 transform hover:scale-105">
                                В корзину
                            </button>
                        </td>
                    </tr>
                ))}
            </tbody>
        </table>
    </div>
);

const MotherboardPage: React.FC = () => {
  const [allMotherboards, setAllMotherboards] = useState<Motherboard[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<Filters>({ socket: 'all', formFactor: 'all' });
  const [notification, setNotification] = useState<string | null>(null);
  
  const { addToCart } = useCart();

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        setError(null);
        const { motherboards } = await fetchMoboAndRam();
        setAllMotherboards(motherboards);
      } catch (err) {
        if (err instanceof Error) {
            setError(err.message);
        } else {
            setError("Произошла неизвестная ошибка.");
        }
      } finally {
        setLoading(false);
      }
    };
    loadData();
  }, []);
  
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => setNotification(null), 3000);
      return () => clearTimeout(timer);
    }
  }, [notification]);

  const socketOptions = useMemo(() => {
    const sockets = new Set(allMotherboards.map(m => m.socket));
    return Array.from(sockets).sort();
  }, [allMotherboards]);

  const formFactorOptions = useMemo(() => {
    const formFactors = new Set(allMotherboards.map(m => m.formFactor));
    return Array.from(formFactors).sort();
  }, [allMotherboards]);

  const filteredMotherboards = useMemo(() => {
    return allMotherboards.filter(mobo => {
      const socketMatch = filters.socket === 'all' || mobo.socket === filters.socket;
      const formFactorMatch = filters.formFactor === 'all' || mobo.formFactor === filters.formFactor;
      return socketMatch && formFactorMatch;
    });
  }, [allMotherboards, filters]);

  const handleFilterChange = useCallback((newFilters: Filters) => {
    setFilters(newFilters);
  }, []);

  const handleAddToCart = (mobo: Motherboard) => {
    addToCart(mobo);
    setNotification(`${mobo.name} добавлена в корзину!`);
  };

  return (
    <div className="space-y-6">
       {notification && (
            <div className="fixed top-20 right-5 bg-green-500 text-white py-2 px-4 rounded-lg shadow-lg z-20 animate-fade-in-out">
                {notification}
            </div>
        )}
      <h1 className="text-3xl font-bold tracking-tight text-white">Материнские платы</h1>
      <FilterControls 
        filters={filters} 
        onFilterChange={handleFilterChange} 
        socketOptions={socketOptions}
        formFactorOptions={formFactorOptions}
      />
      
      {loading && <Spinner />}
      
      {error && (
        <div className="bg-red-900/50 border border-red-700 text-red-300 px-4 py-3 rounded-lg" role="alert">
          <strong className="font-bold">Ошибка! </strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}

      {!loading && !error && filteredMotherboards.length > 0 && (
          <MotherboardTable motherboards={filteredMotherboards} onAddToCart={handleAddToCart} />
      )}
      
      {!loading && !error && (
        (allMotherboards.length === 0 || filteredMotherboards.length === 0) && (
          <div className="text-center py-10 bg-gray-800/60 rounded-lg">
              <p className="text-gray-400">
                {allMotherboards.length === 0 ? "Товары не найдены." : "По вашему запросу ничего не найдено."}
              </p>
          </div>
        )
      )}
    </div>
  );
};

export default MotherboardPage;

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { fetchMoboAndRam } from '../services/googleSheetsService';
import type { Ram } from '../types';
import Spinner from '../components/Spinner';
import { useCart } from '../contexts/CartContext';

interface Filters {
  vendor: string;
  type: string;
  capacity: string;
}

const FilterControls: React.FC<{
  filters: Filters;
  onFilterChange: (newFilters: Filters) => void;
  vendorOptions: string[];
  typeOptions: string[];
  capacityOptions: string[];
}> = ({ filters, onFilterChange, vendorOptions, typeOptions, capacityOptions }) => {
    
    const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const { name, value } = e.target;
        onFilterChange({ ...filters, [name]: value });
    };

    return (
        <div className="bg-gray-800/60 p-4 rounded-lg mb-6 flex flex-col sm:flex-row gap-4 sm:gap-6 items-start sm:items-center">
            <h3 className="text-lg font-semibold mr-4 shrink-0">Фильтры</h3>
            <div className="flex flex-col sm:flex-row gap-4 w-full">
                <div className="w-full sm:w-1/2 lg:w-1/4">
                    <label htmlFor="vendor-filter" className="block text-sm font-medium text-gray-300 mb-1">Вендор</label>
                    <select
                        id="vendor-filter"
                        name="vendor"
                        value={filters.vendor}
                        onChange={handleSelectChange}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        aria-label="Фильтр по вендору"
                    >
                        <option value="all">Все</option>
                        {vendorOptions.map(option => <option key={option} value={option}>{option}</option>)}
                    </select>
                </div>
                <div className="w-full sm:w-1/2 lg:w-1/4">
                    <label htmlFor="type-filter" className="block text-sm font-medium text-gray-300 mb-1">Тип</label>
                    <select
                        id="type-filter"
                        name="type"
                        value={filters.type}
                        onChange={handleSelectChange}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        aria-label="Фильтр по типу"
                    >
                        <option value="all">Все</option>
                        {typeOptions.map(option => <option key={option} value={option}>{option}</option>)}
                    </select>
                </div>
                <div className="w-full sm:w-1/2 lg:w-1/4">
                    <label htmlFor="capacity-filter" className="block text-sm font-medium text-gray-300 mb-1">Объем</label>
                    <select
                        id="capacity-filter"
                        name="capacity"
                        value={filters.capacity}
                        onChange={handleSelectChange}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        aria-label="Фильтр по объему"
                    >
                        <option value="all">Все</option>
                        {capacityOptions.map(option => <option key={option} value={option}>{option}</option>)}
                    </select>
                </div>
            </div>
        </div>
    );
};

const RamTable: React.FC<{ ramItems: Ram[]; onAddToCart: (ram: Ram) => void; }> = ({ ramItems, onAddToCart }) => (
    <div className="overflow-x-auto bg-gray-800/60 rounded-lg shadow-lg">
        <table className="min-w-full divide-y divide-gray-700">
            <thead className="bg-gray-700/50">
                <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Наименование</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Вендор</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Тип</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Объем</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Цена за шт.</th>
                    <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-300 uppercase tracking-wider">Действие</th>
                </tr>
            </thead>
            <tbody className="divide-y divide-gray-700">
                {ramItems.map(ram => (
                    <tr key={ram.id} className="hover:bg-gray-700/40 transition-colors">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">{ram.name}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{ram.vendor}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{ram.type}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{ram.capacity}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(ram.price)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                            <button onClick={() => onAddToCart(ram)} className="bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-2 px-4 rounded-md transition-all duration-200 transform hover:scale-105">
                                В корзину
                            </button>
                        </td>
                    </tr>
                ))}
            </tbody>
        </table>
    </div>
);

const RamPage: React.FC = () => {
  const [allRam, setAllRam] = useState<Ram[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<Filters>({ vendor: 'all', type: 'all', capacity: 'all' });
  const [notification, setNotification] = useState<string | null>(null);
  
  const { addToCart } = useCart();

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        setError(null);
        const { ram } = await fetchMoboAndRam();
        setAllRam(ram);
      } catch (err) {
        if (err instanceof Error) {
            setError(err.message);
        } else {
            setError("Произошла неизвестная ошибка.");
        }
      } finally {
        setLoading(false);
      }
    };
    loadData();
  }, []);
  
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => setNotification(null), 3000);
      return () => clearTimeout(timer);
    }
  }, [notification]);

  const vendorOptions = useMemo(() => {
    const vendors = new Set(allRam.map(r => r.vendor));
    return Array.from(vendors).sort();
  }, [allRam]);

  const typeOptions = useMemo(() => {
    const types = new Set(allRam.map(r => r.type));
    return Array.from(types).sort();
  }, [allRam]);

  const capacityOptions = useMemo(() => {
    const capacities = new Set(allRam.map(r => r.capacity));
    return Array.from(capacities).sort();
  }, [allRam]);

  const filteredRam = useMemo(() => {
    return allRam.filter(ram => {
      const vendorMatch = filters.vendor === 'all' || ram.vendor === filters.vendor;
      const typeMatch = filters.type === 'all' || ram.type === filters.type;
      const capacityMatch = filters.capacity === 'all' || ram.capacity === filters.capacity;
      return vendorMatch && typeMatch && capacityMatch;
    });
  }, [allRam, filters]);

  const handleFilterChange = useCallback((newFilters: Filters) => {
    setFilters(newFilters);
  }, []);

  const handleAddToCart = (ram: Ram) => {
    addToCart(ram);
    setNotification(`${ram.name} добавлена в корзину!`);
  };

  return (
    <div className="space-y-6">
       {notification && (
            <div className="fixed top-20 right-5 bg-green-500 text-white py-2 px-4 rounded-lg shadow-lg z-20 animate-fade-in-out">
                {notification}
            </div>
        )}
      <h1 className="text-3xl font-bold tracking-tight text-white">Оперативная память</h1>
      <FilterControls 
        filters={filters} 
        onFilterChange={handleFilterChange} 
        vendorOptions={vendorOptions}
        typeOptions={typeOptions}
        capacityOptions={capacityOptions}
      />
      
      {loading && <Spinner />}
      
      {error && (
        <div className="bg-red-900/50 border border-red-700 text-red-300 px-4 py-3 rounded-lg" role="alert">
          <strong className="font-bold">Ошибка! </strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}

      {!loading && !error && filteredRam.length > 0 && (
          <RamTable ramItems={filteredRam} onAddToCart={handleAddToCart} />
      )}
      
      {!loading && !error && (
        (allRam.length === 0 || filteredRam.length === 0) && (
          <div className="text-center py-10 bg-gray-800/60 rounded-lg">
              <p className="text-gray-400">
                {allRam.length === 0 ? "Товары не найдены." : "По вашему запросу ничего не найдено."}
              </p>
          </div>
        )
      )}
    </div>
  );
};

export default RamPage;
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';

const RegisterPage: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const { register } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      setError('Пароли не совпадают');
      return;
    }
    setError('');
    // Mock registration logic
    register(email);
    navigate('/');
  };

  return (
    <div className="flex justify-center items-center py-12">
      <div className="w-full max-w-md p-8 space-y-6 bg-gray-800 rounded-lg shadow-lg">
        <h2 className="text-2xl font-bold text-center text-white">Создание аккаунта</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {error && <p className="text-red-400 text-sm text-center">{error}</p>}
          <div>
            <label htmlFor="email" className="text-sm font-medium text-gray-300 block mb-2">Email</label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            />
          </div>
          <div>
            <label htmlFor="password" className="text-sm font-medium text-gray-300 block mb-2">Пароль</label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            />
          </div>
          <div>
            <label htmlFor="confirm-password" className="text-sm font-medium text-gray-300 block mb-2">Подтвердите пароль</label>
            <input
              id="confirm-password"
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            />
          </div>
          <button type="submit" className="w-full py-2 px-4 bg-indigo-600 hover:bg-indigo-500 text-white font-semibold rounded-md transition-colors">
            Зарегистрироваться
          </button>
        </form>
         <p className="text-sm text-center text-gray-400">
          Уже есть аккаунт?{' '}
          <Link to="/login" className="font-medium text-indigo-400 hover:underline">
            Войти
          </Link>
        </p>
      </div>
    </div>
  );
};

export default RegisterPage;

import type { Cpu, Motherboard, Ram } from '../types';

const SPREADSHEET_ID = '1ybTrAbqjVEWkX44KdcS6INkhtEwZxtmQkk_IIKhErpc';
const API_KEY = 'AIzaSyDrizXFJBBx_4G-_JQlYpD5QwCnjQ6yljM';

// --- CPU ---
const CPU_SHEET_NAME = 'CPU AMD';
const CPU_DESKTOP_RANGE = 'A5:C';
const CPU_SERVER_RANGE = 'E5:G';
const CPU_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values:batchGet?ranges=${encodeURIComponent(`'${CPU_SHEET_NAME}'!${CPU_DESKTOP_RANGE}`)}&ranges=${encodeURIComponent(`'${CPU_SHEET_NAME}'!${CPU_SERVER_RANGE}`)}&key=${API_KEY}`;

const parseRowsToCpus = (rows: string[][], isServer: boolean): Cpu[] => {
    return rows.map((row: string[], index: number): Cpu | null => {
      const name = row[0];
      const socket = row[1];
      const priceString = row[2];

      if (!name || !priceString) return null;
      
      const price = parseFloat(priceString.replace(/[^\d.]/g, ''));
      if (isNaN(price)) return null;

      return {
        id: `${name}-${socket}-${index}-${isServer}`, 
        name,
        socket: socket || 'N/A',
        price,
        manufacturer: 'AMD',
        isServer,
        category: 'CPU',
      };
    }).filter((cpu): cpu is Cpu => cpu !== null);
};

export const fetchCpus = async (): Promise<Cpu[]> => {
  try {
    const response = await fetch(CPU_URL);
    if (!response.ok) {
        const errorData = await response.json();
        console.error('Google Sheets API Error (CPU):', errorData);
        throw new Error(errorData.error.message || 'Не удалось загрузить данные CPU. Проверьте ключ API и настройки доступа к таблице.');
    }
    const data = await response.json();
    const valueRanges = data.valueRanges || [];
    const desktopRows = valueRanges[0]?.values || [];
    const desktopCpus = parseRowsToCpus(desktopRows, false);
    const serverRows = valueRanges[1]?.values || [];
    const serverCpus = parseRowsToCpus(serverRows, true);
    return [...desktopCpus, ...serverCpus];
  } catch (error) {
    console.error("Error fetching or parsing CPU spreadsheet data:", error);
    throw error;
  }
};

// --- Motherboard & RAM ---
const MOBO_RAM_SHEET_NAME = 'MOBO RAM';
const MOBO_RANGE = 'A5:E'; // Read up to column E for price
const RAM_RANGE = 'G5:L';  // Read from G to L for RAM data to include new price column
const MOBO_RAM_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values:batchGet?ranges=${encodeURIComponent(`'${MOBO_RAM_SHEET_NAME}'!${MOBO_RANGE}`)}&ranges=${encodeURIComponent(`'${MOBO_RAM_SHEET_NAME}'!${RAM_RANGE}`)}&key=${API_KEY}`;

const parseRowsToMotherboards = (rows: string[][]): Motherboard[] => {
    return rows.map((row: string[], index: number): Motherboard | null => {
        const name = row[0];
        const socket = row[1];
        const formFactor = row[2];
        const priceString = row[4]; // Price is in the 5th column (E)
        
        if (!name || !priceString) return null;

        const price = parseFloat(priceString.replace(/[^\d.]/g, ''));
        if (isNaN(price)) return null;

        return {
            id: `mobo-${name}-${socket}-${index}`,
            name,
            socket: socket || 'N/A',
            formFactor: formFactor || 'N/A',
            price,
            category: 'Motherboard',
        };
    }).filter((item): item is Motherboard => item !== null);
};

const parseRowsToRam = (rows: string[][]): Ram[] => {
    return rows.map((row: string[], index: number): Ram | null => {
        // Corresponds to columns G(name), H(vendor), I(type), J(capacity), L(price)
        const name = row[0];
        const vendor = row[1];
        const type = row[2];
        const capacity = row[3];
        const priceString = row[5];

        if (!name || !priceString) return null;

        const price = parseFloat(priceString.replace(/[^\d.]/g, ''));
        if (isNaN(price)) return null;

        return {
            id: `ram-${name}-${vendor}-${type}-${capacity}-${index}`,
            name,
            vendor: vendor || 'N/A',
            type: type || 'N/A',
            capacity: capacity || 'N/A',
            price,
            category: 'RAM',
        };
    }).filter((item): item is Ram => item !== null);
};

export const fetchMoboAndRam = async (): Promise<{ motherboards: Motherboard[], ram: Ram[] }> => {
    try {
        const response = await fetch(MOBO_RAM_URL);
        if (!response.ok) {
            const errorData = await response.json();
            console.error('Google Sheets API Error (MOBO/RAM):', errorData);
            throw new Error(errorData.error.message || 'Не удалось загрузить данные плат и памяти. Проверьте ключ API и настройки доступа к таблице.');
        }
        const data = await response.json();
        const valueRanges = data.valueRanges || [];

        const motherboardRows = valueRanges[0]?.values || [];
        const motherboards = parseRowsToMotherboards(motherboardRows);

        const ramRows = valueRanges[1]?.values || [];
        const ram = parseRowsToRam(ramRows);
        
        return { motherboards, ram };
    } catch (error) {
        console.error("Error fetching or parsing MOBO/RAM spreadsheet data:", error);
        throw error;
    }
};
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Header from './components/Header';
import CpuPage from './pages/CpuPage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import CartPage from './pages/CartPage';
import AvitoPage from './pages/AvitoPage';
import MotherboardPage from './pages/MotherboardPage'; // Import Motherboard page
import RamPage from './pages/RamPage'; // Import RAM page
import { AuthProvider } from './contexts/AuthContext';
import { CartProvider } from './contexts/CartContext';

const App: React.FC = () => {
  return (
    <AuthProvider>
      <CartProvider>
        <div className="min-h-screen bg-gray-900 text-gray-100 font-sans">
          <Header />
          <main className="container mx-auto px-4 py-8">
            <Routes>
              <Route path="/" element={<CpuPage />} />
              <Route path="/motherboards" element={<MotherboardPage />} /> {/* Add Motherboard route */}
              <Route path="/ram" element={<RamPage />} /> {/* Add RAM route */}
              <Route path="/avito" element={<AvitoPage />} />
              <Route path="/login" element={<LoginPage />} />
              <Route path="/register" element={<RegisterPage />} />
              <Route path="/cart" element={<CartPage />} />
            </Routes>
          </main>
        </div>
      </CartProvider>
    </AuthProvider>
  );
};

export default App;
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HVRDCR MARKET</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script>
      tailwind.config = {
        theme: {
          extend: {
            fontFamily: {
              sans: ['Inter', 'sans-serif'],
            },
          }
        }
      }
    </script>
<script type="importmap">
{
  "imports": {
    "react": "https://aistudiocdn.com/react@^19.1.1",
    "react-dom/": "https://aistudiocdn.com/react-dom@^19.1.1/",
    "react/": "https://aistudiocdn.com/react@^19.1.1/",
    "react-router-dom": "https://aistudiocdn.com/react-router-dom@^7.8.2"
  }
}
</script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js"></script>
<link rel="stylesheet" href="/index.css">
</head>
<body class="bg-gray-900">
    <div id="root"></div>
    <script type="module" src="/index.tsx"></script>
</body>
</html>
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { HashRouter } from 'react-router-dom';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <HashRouter>
      <App />
    </HashRouter>
  </React.StrictMode>
);
{
  "name": "HVRDCR MARKET",
  "description": "An online store to browse and purchase CPUs, with data sourced from Google Sheets. Features user registration, login, and a shopping cart.",
  "requestFramePermissions": []
}{
  "name": "hvrdcr-market",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.8.2"
  },
  "devDependencies": {
    "@types/node": "^22.14.0",
    "typescript": "~5.8.2",
    "vite": "^6.2.0"
  }
}
<div align="center">
<img width="1200" height="475" alt="GHBanner" src="https://github.com/user-attachments/assets/0aa67016-6eaf-458a-adb2-6e31a0763ed6" />
</div>

# Run and deploy your AI Studio app

This contains everything you need to run your app locally.

View your app in AI Studio: https://ai.studio/apps/drive/1IuA4jF2xomayS6Rt4RNrhBp_J5X6PPSj

## Run Locally

**Prerequisites:**  Node.js


1. Install dependencies:
   `npm install`
2. Set the `GEMINI_API_KEY` in [.env.local](.env.local) to your Gemini API key
3. Run the app:
   `npm run dev`
{
  "compilerOptions": {
    "target": "ES2022",
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "module": "ESNext",
    "lib": [
      "ES2022",
      "DOM",
      "DOM.Iterable"
    ],
    "skipLibCheck": true,
    "types": [
      "node"
    ],
    "moduleResolution": "bundler",
    "isolatedModules": true,
    "moduleDetection": "force",
    "allowJs": true,
    "jsx": "react-jsx",
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "allowImportingTsExtensions": true,
    "noEmit": true
  }
}
export interface Cpu {
  id: string;
  name: string;
  socket: string;
  price: number;
  manufacturer: 'AMD' | 'Intel' | 'Unknown';
  isServer: boolean;
  category: 'CPU';
}

export interface Motherboard {
    id: string;
    name: string;
    socket: string;
    formFactor: string;
    price: number;
    category: 'Motherboard';
}

export interface Ram {
    id: string;
    name: string;
    vendor: string;
    type: string;
    capacity: string;
    price: number;
    category: 'RAM';
}

export type Product = Cpu | Motherboard | Ram;

export interface CartItem {
  product: Product;
  quantity: number;
}

export interface User {
  email: string;
}import path from 'path';
import { defineConfig, loadEnv } from 'vite';

export default defineConfig(({ mode }) => {
    const env = loadEnv(mode, '.', '');
    return {
      define: {
        'process.env.API_KEY': JSON.stringify(env.GEMINI_API_KEY),
        'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY)
      },
      resolve: {
        alias: {
          '@': path.resolve(__dirname, '.'),
        }
      }
    };
});
GEMINI_API_KEY=PLACEHOLDER_API_KEY
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
